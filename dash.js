const { Client, Intents, Permissions } = require('discord.js');
const config = require("./Moderation/Configs/config.json");
const Discord = require("discord.js");
const express = require('express');
const app = express();
const setupdurum = require("./Moderation/Models/Setup.js");
const cezadurum = require("./Moderation/Models/Ceza.js");
const özelkomut = require("./Moderation/Models/NewCommand.js")
const bParser = require("body-parser");
const cParser = require("cookie-parser");
const ejs = require("ejs");
const path = require("path");

const passport = require('passport');
const session = require('express-session');
const { Strategy } = require('passport-discord');
const moment = require('moment');
moment.locale('tr');

app.engine('ejs', ejs.__express);
app.set('view engine', 'ejs');
app.use(bParser.json());
app.use(bParser.urlencoded({ extended: true }));
app.use(cParser());
app.set('views', path.join(__dirname, './Moderation/Controller/Yol'));
app.use('/css', express.static(path.join(__dirname, './Moderation/Controller/Yol/css')));
app.use('/js', express.static(path.join(__dirname, './Moderation/Controller/Yol/js')));
app.use('/img', express.static(path.join(__dirname, './Moderation/Controller/Yol/img')));
app.use('/fonts', express.static(path.join(__dirname, './Moderation/Controller/Yol/fonts')));
app.use(express.static(path.join(__dirname, './Moderation/Controller/public')));
app.use(session({ secret: 'xd', resave: false, saveUninitialized: true }));
app.use(passport.initialize());
app.use(passport.session());

passport.serializeUser((user, done) => { done(null, user) });
passport.deserializeUser((obj, done) => { done(null, obj) });
const Yetkilioc = ["identify", "guilds"];
passport.use(new Strategy({
    clientID: config.BotBağlıozAşkom.clientID,
    clientSecret: config.BotBağlıozAşkom.clientSecret,
    callbackURL: config.BotBağlıozAşkom.callbackURL,
    scope: Yetkilioc
}, (accessToken, refreshToken, profile, done) => {
    process.nextTick(() => done(null, profile));
}));
 

app.get("/login", passport.authenticate("discord", { scope: Yetkilioc, }));
app.get('/callback', passport.authenticate("discord", { failureRedirect: '/error' }), async (req, res) => { const elchavopy = await setupdurum.findOne({ guildID: config.BotBağlıozAşkom.guildID}); res.redirect('/panel2'); 
});
app.get('/logout', (req, res) => { req.logOut(); return res.redirect('/'); });

app.get('/', async (req, res) => { res.redirect('/login') })

app.get('/error', async (req, res) => { res.render('hata', { user: req.user, bot: client }); })
app.get('/panelerror', async (req, res) => { res.render('panelhata', {user: req.user, bot: client }); });
app.get('/panel2', async (req, res) => { if (!["1067476859933179954"].some(x => req.user.id === x) )
 return res.redirect('/panelerror'); res.render('panel2', { user: req.user, bot: client }) 
})

 //BURDADA SAYFA GİYDİRİOZ
app.get('/limit', async (req, res) => { if(!["1067476859933179954"].some(x => req.user.id === x)) return res.redirect('/panelerror'); res.render('limit', { user: req.user, bot: client, elchavopy: await setupdurum.findOne({ guildID: config.BotBağlıozAşkom.guildID}), data: await cezadurum.find({ guildID: config.BotBağlıozAşkom.guildID }) }); })
app.get('/chat', async (req, res) => { if(!["1067476859933179954"].some(x => req.user.id === x)) return res.redirect('/panelerror'); res.render('chat', { user: req.user, bot: client, elchavopy: await setupdurum.findOne({ guildID: config.BotBağlıozAşkom.guildID}), data: await cezadurum.find({ guildID: config.BotBağlıozAşkom.guildID }) }); })
app.get('/leaderboard', async (req, res) => { if(!["1067476859933179954"].some(x => req.user.id === x)) return res.redirect('/panelerror'); res.render('leaderboard', { user: req.user, bot: client, elchavopy: await setupdurum.findOne({ guildID: config.BotBağlıozAşkom.guildID}), data: await cezadurum.find({ guildID: config.BotBağlıozAşkom.guildID }) }); })
app.get('/panel2', async (req, res) => { if (!["1067476859933179954"].some(x => req.user.id === x)) return res.redirect('/panelerror'); res.render('panel2', { user: req.user, bot: client, elchavopy: await setupdurum.findOne({guildID: config.BotBağlıozAşkom.guildID}), data: await cezadurum.find({ guildID: config.BotBağlıozAşkom.guildID }) }); const data = await cezadurum.find({ guildID: config.BotBağlıozAşkom.guildID }); data.filter(e => e.chatmuted === true); })
app.get('/cezalandirma', async (req, res) => { if (!["1067476859933179954"].some(x => req.user.id === x)) return res.redirect('/panelerror'); res.render('cezalandirma', { user: req.user, bot: client, elchavopy: await setupdurum.findOne({guildID: config.BotBağlıozAşkom.guildID}), data: await cezadurum.find({ guildID: config.BotBağlıozAşkom.guildID }) }); const data = await cezadurum.find({ guildID: config.BotBağlıozAşkom.guildID }); data.filter(e => e.chatmuted === true); })
app.get('/underworld', async (req, res) => { if (!["1067476859933179954"].some(x => req.user.id === x)) return res.redirect('/panelerror'); res.render('underworld', { user: req.user, bot: client, elchavopy: await setupdurum.findOne({guildID: config.BotBağlıozAşkom.guildID}), data: await cezadurum.find({ guildID: config.BotBağlıozAşkom.guildID }) }); const data = await cezadurum.find({ guildID: config.BotBağlıozAşkom.guildID }); data.filter(e => e.jail === false); })
app.get('/paket', async (req, res) => { if (!["1067476859933179954"].some(x => req.user.id === x)) return res.redirect('/panelerror'); res.render('paket', { user: req.user, bot: client, elchavopy: await setupdurum.findOne({guildID: config.BotBağlıozAşkom.guildID}), data: await cezadurum.find({ guildID: config.BotBağlıozAşkom.guildID }) }); const data = await cezadurum.find({ guildID: config.BotBağlıozAşkom.guildID }); data.filter(e => e.chatmuted === true); })
app.get('/register', async (req, res) => {if (!["1067476859933179954"].some(x => req.user.id === x)) return res.redirect('/panelerror'); res.render('register', { user: req.user, bot: client, elchavopy: await setupdurum.findOne({ guildID: config.BotBağlıozAşkom.guildID}) }); })
app.get('/moderation', async (req, res) => { if(!["1067476859933179954"].some(x => req.user.id === x)) return res.redirect('/panelerror'); res.render('moderation', { user: req.user, bot: client, elchavopy: await setupdurum.findOne({ guildID: config.BotBağlıozAşkom.guildID}), data: await cezadurum.find({ guildID: config.BotBağlıozAşkom.guildID }) }); const data = await cezadurum.find({ guildID: config.BotBağlıozAşkom.guildID }); data.filter(e => e.chatmuted == true).map(a => console.log(a.userID)) })
app.get('/bot', async (req, res) => {if (!["1067476859933179954"].some(x => req.user.id === x)) return res.redirect('/panelerror'); res.render('bot', { user: req.user, bot: client, elchavopy: await setupdurum.findOne({ guildID: config.BotBağlıozAşkom.guildID}) }); })
app.get('/emoji', async (req, res) => {if (!["1067476859933179954"].some(x => req.user.id === x)) return res.redirect('/panelerror'); res.render('emoji', { user: req.user, bot: client, elchavopy: await setupdurum.findOne({ guildID: config.BotBağlıozAşkom.guildID}) }); })
app.get('/profile', async (req, res) => {if (!["1067476859933179954"].some(x => req.user.id === x)) return res.redirect('/panelerror'); res.render('profile', { user: req.user, bot: client, elchavopy: await setupdurum.findOne({ guildID: config.BotBağlıozAşkom.guildID}) }); })
app.get('/stat', async (req, res) => {if (!["1067476859933179954"].some(x => req.user.id === x)) return res.redirect('/panelerror'); res.render('stat', { user: req.user, bot: client, elchavopy: await setupdurum.findOne({ guildID: config.BotBağlıozAşkom.guildID}) }); })
app.get('/guild', async (req, res) => {if (!["1067476859933179954"].some(x => req.user.id === x)) return res.redirect('/panelerror'); res.render('guild', { user: req.user, bot: client, elchavopy: await setupdurum.findOne({ guildID: config.BotBağlıozAşkom.guildID}) }); })
app.get('/ozelkomut', async (req, res) => {if (!["1067476859933179954"].some(x => req.user.id === x)) return res.redirect('/panelerror'); res.render('ozelkomut', { user: req.user, users: req.user, bot: client, elchavopy: await özelkomut.findOne({ guildID: config.BotBağlıozAşkom.guildID}), data: await özelkomut.find({ guildID: config.BotBağlıozAşkom.guildID }) }); const data = await özelkomut.find({ guildID: config.BotBağlıozAşkom.guildID }); data.filter(e => e.cmdName).map; data.filter(e => e.cmdID).map; data.filter(e => e.cmdUseCount).map; data.filter(e => e.cmdOwner).map; data.filter(e => e.allowedUsers).map; }); 
app.get('/guildlist', async (req, res) => {if (!["1067476859933179954"].some(x => req.user.id === x)) return res.redirect('/panelerror'); res.render('guildlist', { user: req.user, users: req.user, bot: client, elchavopy: await özelkomut.findOne({ guildID: config.BotBağlıozAşkom.guildID}), data: await setupdurum.find({ guildID: config.BotBağlıozAşkom.guildID }) }); const data = await setupdurum.find({ guildID: config.BotBağlıozAşkom.guildID }); });
app.get('/guildemojilist', async (req, res) => {if (!["1067476859933179954"].some(x => req.user.id === x)) return res.redirect('/panelerror'); res.render('guildemojilist', { user: req.user, users: req.user, bot: client, elchavopy: await özelkomut.findOne({ guildID: config.BotBağlıozAşkom.guildID}), data: await setupdurum.find({ guildID: config.BotBağlıozAşkom.guildID }) }); const data = await setupdurum.find({ guildID: config.BotBağlıozAşkom.guildID }); });
app.get('/welcomeayar', async (req, res) => {if (!["1067476859933179954"].some(x => req.user.id === x)) return res.redirect('/panelerror'); res.render('welcomeayar', { user: req.user, bot: client, elchavopy: await setupdurum.findOne({ guildID: config.BotBağlıozAşkom.guildID}) }); })

//ALTTA VERİ İŞLİOZ
app.post('/registerkaydet', async (req, res) => { res.render('register', { user: req.user, bot: client }); let obj = { registeryetkili: req.body.registeryetkili, kayitsiz: req.body.kayitsizrol, erkekrolleri: req.body.erkekrolleri, kadinrolleri: req.body.kadinrolleri}; if (obj.registeryetkili !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID }, { $set: { botCommandsRoles: [obj.registeryetkili] } }, { upsert: true }).exec(), console.log("[WEB PANEL] Register yetkilisi " + obj.registeryetkili + " rol idsi olarak ayarlandı!"); } else { console.log("[WEB PANEL] Site ayarlarında register yetkili rolü seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.erkekrolleri !== undefined) { let ErkekRollerFiltered = []; typeof obj.erkekrolleri == 'string' ? ErkekRollerFiltered.push(obj.erkekrolleri) : obj.erkekrolleri.map(a => ErkekRollerFiltered.push(a)); await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID }, { $set: { manRoles: ErkekRollerFiltered } }, { upsert: true }).exec();} else { console.log("[WEB PANEL] Site ayarlarında erkek rolleri seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.kadinrolleri !== undefined) { let KadinRollerFiltered = []; typeof obj.kadinrolleri == 'string' ? KadinRollerFiltered.push(obj.kadinrolleri) : obj.kadinrolleri.map(a => KadinRollerFiltered.push(a)); await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID }, { $set: { ladyRoles: KadinRollerFiltered } }, { upsert: true }).exec(); } else { console.log("[WEB PANEL] Site ayarlarında kadın rolleri seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.kayitsiz !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID }, { $set: { unregisterRoles: [obj.kayitsiz] } }, { upsert: true }).exec(); } else { console.log("[WEB PANEL] Site ayarlarında unregister rol seçilmediği için herhangi bir işlem yapmıyorum!\n-------------------------------------------------------------------------") };  })
app.post('/yetkilikaydet', async (req, res) => { res.render('moderation', { user: req.user, bot: client }); let obj = { jailyrol: req.body.jailyrol, banyrol: req.body.banyrol, muteyrol: req.body.muteyrol, vmuteyrol: req.body.vmuteyrol, etkinlikrol: req.body.etkinlikrol, çekilişrol: req.body.çekilişrol}; if (obj.jailyrol !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID }, { $set: { jailRoles: [obj.jailyrol] } }, { upsert: true }).exec(), console.log("[WEB PANEL] Jail yetkilisi " + obj.jailyrol + " rol idsi olarak ayarlandı!"); } else { console.log("[WEB PANEL] Site ayarlarında register yetkili rolü seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.banyrol !== undefined){ await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID }, { $set: { banHammerRoles: [obj.banyrol] } }, { upsert: true }).exec(); console.log("[WEB PANEL] Ban yetkilisi " + obj.banyrol + " rol idsi olarak ayarlandı!") } else { console.log("[WEB PANEL] Site ayarlarında ban yetkili rolü seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.muteyrol !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID }, { $set: { chatMuteRoles: [obj.muteyrol] } }, { upsert: true }).exec(); console.log("[WEB PANEL] Mute yetkilisi " + obj.muteyrol + " rol id'si olarak ayarlandı!") } else { console.log("[WEB PANEL] Site ayarlarında mute yetkili seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.vmuteyrol !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID }, { $set: { voiceMuteRoles: [obj.vmuteyrol] } }, { upsert: true }).exec(); console.log("[WEB PANEL] Voice Mute yetkilisi " + obj.vmuteyrol + " rol id'si olarak ayarlandı!") } else { console.log("[WEB PANEL] Site ayarlarında Vmute yetkili seçilmediği için herhangi bir işlem yapmıyorum!") } if (obj.etkinlikrol !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID }, { $set: { etkinlikkatılımcısı: obj.etkinlikrol } }, { upsert: true }).exec(); console.log("[WEB PANEL] Etkinlik Katılımcısı " + obj.etkinlikrol + " rol id'si olarak ayarlandı!") } else { console.log("[WEB PANEL] Site ayarlarında Etkinlik Katılımcısı seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.çekilişrol !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID }, { $set: { çekilişkatılımcısı: obj.çekilişrol } }, { upsert: true }).exec(); console.log("[WEB PANEL] Çekiliş Katılımcısı " + obj.çekilişrol + " rol id'si olarak ayarlandı!\n-------------------------------------------------------------------------") } else { console.log("[WEB PANEL] Site ayarlarında Çekiliş Katılımcısı seçilmediği için herhangi bir işlem yapmıyorum!\n-------------------------------------------------------------------------") };  }) 
app.post('/genelrolkaydet', async (req, res) => { res.render('moderation', { user: req.user, bot: client}); let obj = {jailrol: req.body.jailrol, vmuterol: req.body.vmuterol, muterol: req.body.muterol, boosterrol: req.body.boosterrol }; if (obj.jailrol !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, {$set: { punitiveRole: obj.jailrol } }, {upsert: true}).exec(); console.log("[WEB PANEL] Jailed rolü" + obj.jailrol + " rol idsi olarak ayarlandı!") } else {console.log("[WEB PANEL] Site ayarlarında jailed rolü seçilmediği için herhangi bir işle yapmıyorum!")}; if (obj.muterol !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID }, { $set: { mutedRole: obj.muterol } }, { upsert: true }).exec(); console.log("[WEB PANEL] Muted rolü" + obj.muterol + "rol idsi olarak ayarlandı!") } else { console.log("[WEB PANEL] Site ayarlarında mute rolü seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.boosterrol !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID }, { $set: { boosterRole: obj.boosterrol } }, { upsert: true }).exec(); console.log("[WEB PANEL] Booster rolü " + obj.boosterrol + " rol id'si olarak ayarlandı!\n-------------------------------------------------------------------------") } else { console.log("[WEB PANEL] Site ayarlarında Booster rolü seçilmediği için herhangi bir işlem yapmıyorum!\n-------------------------------------------------------------------------") }; })
app.post('/rolkaydet', async (req, res) => { res.render('bot', { user: req.user, bot: client}); let obj = { enaltyetkilirol: req.body.enaltrol, yasaklitag: req.body.yasaklıtagrol, yoneticirol:req.body.ytrol, yenihesap:req.body.yenihesaprol }; if (obj.yasaklitag !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, {$set: { bannedTagRole: obj.yasaklitag } }, {upsert: true}).exec(); console.log("[WEB PANEL] Yasaklı tag rolü " + obj.yasaklitag + " rol idsi olarak ayarlandı!") } else {console.log("[WEB PANEL] Site ayarlarında yasaklı tag rolü seçilmediği için herhangi bir işlem yapmıyorum!")}; if (obj.yenihesap !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, {$set: { newAccRole: obj.yenihesap } }, {upsert: true}).exec(); console.log("[WEB PANEL] Yeni hesap rolü " + obj.yenihesap + " rol idsi olarak ayarlandı!") } else {console.log("[WEB PANEL] Site ayarlarında yeni hesap rolü seçilmediği için herhangi bir işlem yapmıyorum!")}; if (obj.yoneticirol !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, {$set: { adminRole: obj.yoneticirol } }, {upsert: true}).exec(); console.log("[WEB PANEL] Yönetici rolü " + obj.yoneticirol + " rol idsi olarak ayarlandı!") } else {console.log("[WEB PANEL] Site ayarlarında yönetici rolü seçilmediği için herhangi bir işlem yapmıyorum!")}; if (obj.enaltyetkilirol !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, {$set: { minStaffRole: obj.enaltyetkilirol } }, {upsert: true}).exec(); console.log("[WEB PANEL] En alt yetkili rolü " + obj.enaltyetkilirol + " rol idsi olarak ayarlandı!") } else {console.log("[WEB PANEL] Site ayarlarında en alt yetkili rolü seçilmediği için herhangi bir işlem yapmıyorum!")}; })
app.post('/chatkaydet', async (req, res) => { res.render('chat', {user: req.user, bot: client });let obj = { kurallar: req.body.kurallar, genelchat: req.body.genelchat, ftchat: req.body.ftchat, welcomekanal: req.body.welcomekanal, welcomeseskanal: req.body.welcomeseskanal, botses: req.body.botses, botcommands: req.body.botcommands }; if (obj.genelchat !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID }, { $set: { chat: obj.genelchat } }, { upsert: true }).exec(), console.log("[WEB PANEL] Genel Chat " + obj.genelchat + " kanal idsi olarak ayarlandı!"); } else { console.log("[WEB PANEL] Site ayarlarında genel chat kanalı seçilmediği için herhangi bir işlem yapmıyorum!")}; if (obj.ftchat !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID }, { $set: { fotoChat: obj.ftchat } }, { upsert: true }).exec(), console.log("[WEB PANEL] Foto chat " + obj.ftchat + " kanal idsi olarak ayarlandı!"); } else { console.log("[WEB PANEL] Site ayarlarında foto chat kanalı seçilmediği için herhangi bir işlem yapmıyorum!")}; if (obj.welcomekanal !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID }, { $set: { registerChat: obj.welcomekanal } }, { upsert: true }).exec(), console.log("[WEB PANEL] Welcome chat " + obj.welcomekanal + " kanal idsi olarak ayarlandı!"); } else { console.log("[WEB PANEL] Site ayarlarında welcome chat kanalı seçilmediği için herhangi bir işlem yapmıyorum!")};  if (obj.welcomeseskanal !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID }, { $set: { RegisterVoices: [obj.welcomeseskanal] } }, { upsert: true }).exec(), console.log("[WEB PANEL] Welcome ses " + obj.welcomeseskanal + " kanal idsi olarak ayarlandı!"); } else { console.log("[WEB PANEL] Site ayarlarında welcome chat kanalı seçilmediği için herhangi bir işlem yapmıyorum!")}; if (obj.botses !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID }, { $set: { botVoiceChannel: obj.botses } }, { upsert: true }).exec(), console.log("[WEB PANEL] Bot ses " + obj.botses + " kanal idsi olarak ayarlandı!"); } else { console.log("[WEB PANEL] Site ayarlarında Bot ses kanalı seçilmediği için herhangi bir işlem yapmıyorum!")}; if (obj.kurallar !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID }, { $set: { rules: obj.kurallar } }, { upsert: true }).exec(), console.log("[WEB PANEL] Kurallar chat " + obj.kurallar + " kanal idsi olarak ayarlandı!"); } else { console.log("[WEB PANEL] Site ayarlarında Kurallar kanalı seçilmediği için herhangi bir işlem yapmıyorum!")}; if (obj.botcommands !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID }, { $set: { botCommandsChannel: obj.botcommands } }, { upsert: true }).exec(), console.log("[WEB PANEL] Bot Commands " + obj.botcommands + " kanal idsi olarak ayarlandı!\n-------------------------------------------------------------------------"); } else { console.log("[WEB PANEL] Site ayarlarında Bot commands kanalı seçilmediği için herhangi bir işlem yapmıyorum!\n-------------------------------------------------------------------------") }})
app.post('/limit', async (req, res) => { res.render('limit', { user: req.user, bot: client}); let obj = { isimlimit: req.body.isimlimit, kayitlimit: req.body.kayitlimit, voicemutelimit : req.body.voicemutelimit, chatmutelimit: req.body.chatmutelimit, banlimit: req.body.banlimit, jaillimit: req.body.jaillimit, reklamlimit: req.body.reklamlimit, linklimit: req.body.linklimit, capslimit: req.body.capslimit, etiketlimit: req.body.etiketlimit, kufurlimit: req.body.kufurlimit, spamlimit: req.body.spamlimit }; if (obj.isimlimit !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, {$set: { changeNameLimit: obj.isimlimit } }, {upsert: true}).exec(); console.log("[WEB PANEL] İsim limit " + obj.isimlimit + " olarak ayarlandı!") } else {console.log("[WEB PANEL] Site ayarlarında isim limiti seçilmediği için herhangi bir işlem yapmıyorum!")};if (obj.kayitlimit !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, {$set: { registerLimit: obj.kayitlimit } }, {upsert: true}).exec(); console.log("[WEB PANEL] Kayıt limit " + obj.kayitlimit + " olarak ayarlandı!") } else {console.log("[WEB PANEL] Site ayarlarında kayıt limiti seçilmediği için herhangi bir işlem yapmıyorum!")};if (obj.voicemutelimit !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, {$set: { voiceMuteLimit: obj.voicemutelimit } }, {upsert: true}).exec(); console.log("[WEB PANEL] Voice mute limit " + obj.voicemutelimit + " olarak ayarlandı!") } else {console.log("[WEB PANEL] Site ayarlarında voice mute limiti seçilmediği için herhangi bir işlem yapmıyorum!")};if (obj.chatmutelimit !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, {$set: { chatMuteLimit: obj.chatmutelimit } }, {upsert: true}).exec(); console.log("[WEB PANEL] Chat mute limit " + obj.chatmutelimit + " olarak ayarlandı!") } else {console.log("[WEB PANEL] Site ayarlarında chat mute limiti seçilmediği için herhangi bir işlem yapmıyorum!")};if (obj.banlimit !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, {$set: { banLimit: obj.banlimit } }, {upsert: true}).exec(); console.log("[WEB PANEL] Ban limit " + obj.banlimit + " olarak ayarlandı!") } else {console.log("[WEB PANEL] Site ayarlarında ban limiti seçilmediği için herhangi bir işlem yapmıyorum!")};if (obj.jaillimit !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, {$set: { jailLimit: obj.jaillimit } }, {upsert: true}).exec(); console.log("[WEB PANEL] Jail limit " + obj.jaillimit + " olarak ayarlandı!") } else {console.log("[WEB PANEL] Site ayarlarında jail limiti seçilmediği için herhangi bir işlem yapmıyorum!")};if (obj.reklamlimit !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, {$set: { advertisementLimit: obj.reklamlimit } }, {upsert: true}).exec(); console.log("[WEB PANEL] Reklam limit " + obj.reklamlimit + " olarak ayarlandı!") } else {console.log("[WEB PANEL] Site ayarlarında jail limiti seçilmediği için herhangi bir işlem yapmıyorum!")};if (obj.linklimit !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, {$set: { linkLimit: obj.linklimit } }, {upsert: true}).exec(); console.log("[WEB PANEL] Link limit " + obj.linklimit + " olarak ayarlandı!") } else {console.log("[WEB PANEL] Site ayarlarında link limiti seçilmediği için herhangi bir işlem yapmıyorum!")};if (obj.capslimit !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, {$set: { capsLimit: obj.capslimit } }, {upsert: true}).exec(); console.log("[WEB PANEL] Caps limit " + obj.capslimit + " olarak ayarlandı!") } else {console.log("[WEB PANEL] Site ayarlarında caps limiti seçilmediği için herhangi bir işlem yapmıyorum!")};if (obj.etiketlimit !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, {$set: { tagLimit: obj.etiketlimit } }, {upsert: true}).exec(); console.log("[WEB PANEL] Etiket limit " + obj.etiketlimit + " olarak ayarlandı!") } else {console.log("[WEB PANEL] Site ayarlarında etiket limiti seçilmediği için herhangi bir işlem yapmıyorum!")};if (obj.kufurlimit !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, {$set: { swearLimit: obj.kufurlimit } }, {upsert: true}).exec(); console.log("[WEB PANEL] Küfür limit " + obj.kufurlimit + " olarak ayarlandı!") } else {console.log("[WEB PANEL] Site ayarlarında küfür limiti seçilmediği için herhangi bir işlem yapmıyorum!")}; if (obj.spamlimit !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, {$set: { spamLimit: obj.spamlimit } }, {upsert: true}).exec(); console.log("[WEB PANEL] Spam limit " + obj.kufurlimit + " olarak ayarlandı!") } else {console.log("[WEB PANEL] Site ayarlarında spam limiti seçilmediği için herhangi bir işlem yapmıyorum!")};})
app.post('/leaderboards', async (req, res) => { res.render('leaderboard', { user: req.user, bot: client }); let obj = {leaderboardkanalıid: req.body.leaderboardkanalıid, LeaderBoardchat: req.body.LeaderBoardchat, LeaderBoardvoice: req.body.LeaderBoardvoice, LeaderBoardyetkili: req.body.LeaderBoardyetkili, LeaderBoardınvite: req.body.LeaderBoardınvite, LeaderBoardregister: req.body.LeaderBoardregister}; if (obj.LeaderBoardchat !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, { $set: { chatStatsLeaderBoardMessageID: obj.LeaderBoardchat} }, { upsert: true }).exec(), console.log("[WEB PANEL] LeaderBoard Chat " + obj.LeaderBoardchat + " mesaj idsi olarak ayarlandı!"); } else { console.log("[WEB PANEL] Site ayarlarında LeaderBoard Chat Mesajı seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.LeaderBoardvoice !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, { $set: { voiceStatsLeaderBoardMessageID: obj.LeaderBoardvoice} }, { upsert: true }).exec(), console.log("[WEB PANEL] LeaderBoard Voice " + obj.LeaderBoardvoice + " mesaj idsi olarak ayarlandı!"); } else { console.log("[WEB PANEL] Site ayarlarında LeaderBoard Voice Mesajı seçilmediği için herhangi bir işlem yapmıyorum!") };if (obj.LeaderBoardyetkili !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, { $set: { taggedStatsLeaderBoardMessageID: obj.LeaderBoardyetkili} }, { upsert: true }).exec(), console.log("[WEB PANEL] LeaderBoard Yetkili " + obj.LeaderBoardyetkili + " mesaj idsi olarak ayarlandı!"); } else { console.log("[WEB PANEL] Site ayarlarında LeaderBoard Yetkili mesajı seçilmediği için herhangi bir işlem yapmıyorum!") };if (obj.LeaderBoardınvite !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, { $set: { inviteStatsLeaderBoardMessageID: obj.LeaderBoardınvite} }, { upsert: true }).exec(), console.log("[WEB PANEL] LeaderBoard Invite " + obj.LeaderBoardınvite + " mesaj idsi olarak ayarlandı!"); } else { console.log("[WEB PANEL] Site ayarlarında LeaderBoard Invite mesajı seçilmediği için herhangi bir işlem yapmıyorum!") };if (obj.LeaderBoardregister !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, { $set: {   registerStatsLeaderBoardMessageID: obj.LeaderBoardregister} }, { upsert: true }).exec(), console.log("[WEB PANEL] LeaderBoard Chat " + obj.LeaderBoardregister + " mesaj idsi olarak ayarlandı!\n-------------------------------------------------------------------------"); } else { console.log("[WEB PANEL] Site ayarlarında LeaderBoard Kayıt mesajı seçilmediği için herhangi bir işlem yapmıyorum!\n-------------------------------------------------------------------------") }; if (obj.leaderboardkanalıid !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, { $set: { leaderBoard: obj.leaderboardkanalıid} }, { upsert: true }).exec() }; })
app.post('/stats', async (req, res) => { res.render('stat', { user: req.user, bot: client }); let obj = { publickategori: req.body.publickategori, registerkategori: req.body.registerkategori, sorunçözmekategori: req.body.sorunçözmekategori, alonekategori: req.body.alonekategori, privatekategori: req.body.privatekategori, streamerkategori: req.body.streamerkategori, sleepkanalı: req.body.sleepkanalı, gamekategori: req.body.gamekategori}; if (obj.publickategori !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, { $set: { publicCategory: obj.publickategori} }, { upsert: true }).exec()}; if (obj.registerkategori !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, { $set: { registerCategory: obj.registerkategori} }, { upsert: true }).exec(); } if (obj.sorunçözmekategori !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, { $set: { sorunÇözmeCategory: obj.sorunçözmekategori} }, { upsert: true }).exec(); }; if (obj.alonekategori !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, { $set: { aloneCategory: obj.alonekategori} }, { upsert: true }).exec(); }; if (obj.streamerkategori !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, { $set: { streamerCategory: obj.streamerkategori} }, { upsert: true }).exec(); } ; if (obj.sleepkanalı !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, { $set: { sleepChannel: obj.sleepkanalı} }, { upsert: true }).exec(); }; if (obj.gamekategori !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, { $set: { gameParents: obj.gamekategori} }, { upsert: true }).exec(); }  if (obj.privatekategori !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, { $set: { privateCategory: obj.privatekategori} }, { upsert: true }).exec()};})
app.post('/guilds', async (req, res) => { res.render('guild', { user: req.user, bot: client }); let obj = {sunucutagfln: req.body.sunucutagfln}; if (obj.sunucutagfln !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, {$set: { guildTag: obj.sunucutagfln } }, {upsert: true}).exec();}; })
app.post('/guildss', async (req, res) => { res.render('guild', { user: req.user, bot: client }); let obj = {sunucutagsızfln: req.body.sunucutagsızfln }; if (obj.sunucutagsızfln !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, {$set: { guildNoTag: obj.sunucutagsızfln } }, {upsert: true}).exec();}; })
app.post('/guildsss', async (req, res) => { res.render('guild', { user: req.user, bot: client }); let obj = {sunucuototag: req.body.sunucuototag }; if (obj.sunucuototag !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, {$set: { otoTag: obj.sunucuototag } }, {upsert: true}).exec();}; })
app.post('/guildssss', async (req, res) => { res.render('guild', { user: req.user, bot: client }); let obj = {botdurum: req.body.botdurum }; if (obj.botdurum !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, {$set: { durum: obj.botdurum } }, {upsert: true}).exec();}; })
app.post('/guildsssss', async (req, res) => { res.render('guild', { user: req.user, bot: client }); let obj = {botstatus: req.body.botstatus }; if (obj.botstatus !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, {$set: { status: obj.botstatus } }, {upsert: true}).exec();}; })
app.post('/tags', async (req, res) => { res.render('guild', { user: req.user, bot: client }); let obj = {taglıalım: req.body.taglıalım }; if (obj.taglıalım !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, {$set: { tagMode: obj.taglıalım } }, {upsert: true}).exec();}; })
app.post('/sunucuisim', async (req, res) => { res.render('guild', { user: req.user, bot: client }); let obj = {sunucuisimm: req.body.sunucuisimm }; if (obj.sunucuisimm !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, {$set: { guildName: obj.sunucuisimm } }, {upsert: true}).exec();}; })
app.post('/welcomeayars', async (req, res) => { res.render('welcomeayar', { user: req.user, bot: client }); let obj = {hgmesaj: req.body.hgmesaj}; if (obj.hgmesaj !== undefined) { await setupdurum.findOneAndUpdate({ guildID: config.BotBağlıozAşkom.guildID}, {$set : { hgMesajı: obj.hgmesaj } }, {upsert: true}).exec();}; })

app.listen(443, () => console.log(`[WEB PANEL] 443`));

